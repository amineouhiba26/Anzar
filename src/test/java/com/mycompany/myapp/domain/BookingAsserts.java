package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BookingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllPropertiesEquals(Booking expected, Booking actual) {
        assertBookingAutoGeneratedPropertiesEquals(expected, actual);
        assertBookingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllUpdatablePropertiesEquals(Booking expected, Booking actual) {
        assertBookingUpdatableFieldsEquals(expected, actual);
        assertBookingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAutoGeneratedPropertiesEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableFieldsEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking relevant properties")
            .satisfies(e ->
                assertThat(e.getStartDate())
                    .as("check startDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getStartDate())
            )
            .satisfies(e ->
                assertThat(e.getEndDate()).as("check endDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEndDate())
            )
            .satisfies(e -> assertThat(e.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotal()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e ->
                assertThat(e.getCreatedDate())
                    .as("check createdDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedDate())
            )
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e ->
                assertThat(e.getLastModifiedDate())
                    .as("check lastModifiedDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getLastModifiedDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableRelationshipsEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking relationships")
            .satisfies(e -> assertThat(e.getProperty()).as("check property").isEqualTo(actual.getProperty()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()));
    }
}
