package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AttributeValueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttributeValueAllPropertiesEquals(AttributeValue expected, AttributeValue actual) {
        assertAttributeValueAutoGeneratedPropertiesEquals(expected, actual);
        assertAttributeValueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttributeValueAllUpdatablePropertiesEquals(AttributeValue expected, AttributeValue actual) {
        assertAttributeValueUpdatableFieldsEquals(expected, actual);
        assertAttributeValueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttributeValueAutoGeneratedPropertiesEquals(AttributeValue expected, AttributeValue actual) {
        assertThat(expected)
            .as("Verify AttributeValue auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttributeValueUpdatableFieldsEquals(AttributeValue expected, AttributeValue actual) {
        assertThat(expected)
            .as("Verify AttributeValue relevant properties")
            .satisfies(e -> assertThat(e.getValueString()).as("check valueString").isEqualTo(actual.getValueString()))
            .satisfies(e ->
                assertThat(e.getValueBigDecimal())
                    .as("check valueBigDecimal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getValueBigDecimal())
            )
            .satisfies(e -> assertThat(e.getValueBoolean()).as("check valueBoolean").isEqualTo(actual.getValueBoolean()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e ->
                assertThat(e.getCreatedDate())
                    .as("check createdDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedDate())
            )
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e ->
                assertThat(e.getLastModifiedDate())
                    .as("check lastModifiedDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getLastModifiedDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttributeValueUpdatableRelationshipsEquals(AttributeValue expected, AttributeValue actual) {
        assertThat(expected)
            .as("Verify AttributeValue relationships")
            .satisfies(e -> assertThat(e.getProperty()).as("check property").isEqualTo(actual.getProperty()));
    }
}
